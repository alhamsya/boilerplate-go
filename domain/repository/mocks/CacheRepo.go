// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	omdb "github.com/alhamsya/boilerplate-go/service/exter/omdb"
	mock "github.com/stretchr/testify/mock"
)

// CacheRepo is an autogenerated mock type for the CacheRepo type
type CacheRepo struct {
	mock.Mock
}

// GetDetailMovie provides a mock function with given fields: ctx, movieID
func (_m *CacheRepo) GetDetailMovie(ctx context.Context, movieID string) (*omdb.OMDBDetail, error) {
	ret := _m.Called(ctx, movieID)

	var r0 *omdb.OMDBDetail
	if rf, ok := ret.Get(0).(func(context.Context, string) *omdb.OMDBDetail); ok {
		r0 = rf(ctx, movieID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*omdb.OMDBDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, movieID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListMovie provides a mock function with given fields: ctx, search, page
func (_m *CacheRepo) GetListMovie(ctx context.Context, search string, page int64) (*omdb.OMDBList, error) {
	ret := _m.Called(ctx, search, page)

	var r0 *omdb.OMDBList
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *omdb.OMDBList); ok {
		r0 = rf(ctx, search, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*omdb.OMDBList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, search, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDetailMovie provides a mock function with given fields: ctx, movieID, req
func (_m *CacheRepo) SetDetailMovie(ctx context.Context, movieID string, req *omdb.OMDBDetail) error {
	ret := _m.Called(ctx, movieID, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *omdb.OMDBDetail) error); ok {
		r0 = rf(ctx, movieID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetListMovie provides a mock function with given fields: ctx, search, page, req
func (_m *CacheRepo) SetListMovie(ctx context.Context, search string, page int64, req *omdb.OMDBList) error {
	ret := _m.Called(ctx, search, page, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, *omdb.OMDBList) error); ok {
		r0 = rf(ctx, search, page, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
