// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// UtilsRepo is an autogenerated mock type for the UtilsRepo type
type UtilsRepo struct {
	mock.Mock
}

// CheckPasswordHash provides a mock function with given fields: password, hash
func (_m *UtilsRepo) CheckPasswordHash(password string, hash string) bool {
	ret := _m.Called(password, hash)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(password, hash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CurrentTimeF provides a mock function with given fields: format
func (_m *UtilsRepo) CurrentTimeF(format string) (string, error) {
	ret := _m.Called(format)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(format)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(format)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Decrypt provides a mock function with given fields: passphrase, cipherText
func (_m *UtilsRepo) Decrypt(passphrase string, cipherText string) (string, error) {
	ret := _m.Called(passphrase, cipherText)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(passphrase, cipherText)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(passphrase, cipherText)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Encrypt provides a mock function with given fields: passphrase, plaintext
func (_m *UtilsRepo) Encrypt(passphrase string, plaintext string) (string, error) {
	ret := _m.Called(passphrase, plaintext)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(passphrase, plaintext)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(passphrase, plaintext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateRangeDate provides a mock function with given fields: fromYear, fromMonth
func (_m *UtilsRepo) GenerateRangeDate(fromYear int, fromMonth int) ([]map[string]time.Time, error) {
	ret := _m.Called(fromYear, fromMonth)

	var r0 []map[string]time.Time
	if rf, ok := ret.Get(0).(func(int, int) []map[string]time.Time); ok {
		r0 = rf(fromYear, fromMonth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]time.Time)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(fromYear, fromMonth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashPassword provides a mock function with given fields: password
func (_m *UtilsRepo) HashPassword(password string) (string, error) {
	ret := _m.Called(password)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RandomString provides a mock function with given fields: length
func (_m *UtilsRepo) RandomString(length int) string {
	ret := _m.Called(length)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(length)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ToMap provides a mock function with given fields: v
func (_m *UtilsRepo) ToMap(v interface{}) map[string]interface{} {
	ret := _m.Called(v)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(interface{}) map[string]interface{}); ok {
		r0 = rf(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// ToStruct provides a mock function with given fields: v, r
func (_m *UtilsRepo) ToStruct(v map[string]interface{}, r interface{}) error {
	ret := _m.Called(v, r)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}, interface{}) error); ok {
		r0 = rf(v, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
