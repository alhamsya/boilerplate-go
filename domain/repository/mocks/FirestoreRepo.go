// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	firestore "cloud.google.com/go/firestore"
	mock "github.com/stretchr/testify/mock"

	modelOpeningAccount "github.com/alhamsya/boilerplate-go/domain/models/opening_account"

	time "time"
)

// FirestoreRepo is an autogenerated mock type for the FirestoreRepo type
type FirestoreRepo struct {
	mock.Mock
}

// CreateOpeningAccount provides a mock function with given fields: ctx, oa
func (_m *FirestoreRepo) CreateOpeningAccount(ctx context.Context, oa *modelOpeningAccount.OpeningAccount) error {
	ret := _m.Called(ctx, oa)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *modelOpeningAccount.OpeningAccount) error); ok {
		r0 = rf(ctx, oa)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOpeningAccountBySecuritiesID provides a mock function with given fields: ctx, securitiesID
func (_m *FirestoreRepo) GetOpeningAccountBySecuritiesID(ctx context.Context, securitiesID string) (*modelOpeningAccount.OpeningAccount, error) {
	ret := _m.Called(ctx, securitiesID)

	var r0 *modelOpeningAccount.OpeningAccount
	if rf, ok := ret.Get(0).(func(context.Context, string) *modelOpeningAccount.OpeningAccount); ok {
		r0 = rf(ctx, securitiesID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelOpeningAccount.OpeningAccount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, securitiesID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOpeningAccountByStatusKYCAndDateRange provides a mock function with given fields: ctx, statusKYC, startDate, endDate
func (_m *FirestoreRepo) GetOpeningAccountByStatusKYCAndDateRange(ctx context.Context, statusKYC int64, startDate *time.Time, endDate *time.Time) ([]*firestore.DocumentSnapshot, error) {
	ret := _m.Called(ctx, statusKYC, startDate, endDate)

	var r0 []*firestore.DocumentSnapshot
	if rf, ok := ret.Get(0).(func(context.Context, int64, *time.Time, *time.Time) []*firestore.DocumentSnapshot); ok {
		r0 = rf(ctx, statusKYC, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*firestore.DocumentSnapshot)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, *time.Time, *time.Time) error); ok {
		r1 = rf(ctx, statusKYC, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapOpeningAccountByStatusKYC provides a mock function with given fields: ctx, statusKYC
func (_m *FirestoreRepo) GetSnapOpeningAccountByStatusKYC(ctx context.Context, statusKYC int64) (*firestore.QuerySnapshot, error) {
	ret := _m.Called(ctx, statusKYC)

	var r0 *firestore.QuerySnapshot
	if rf, ok := ret.Get(0).(func(context.Context, int64) *firestore.QuerySnapshot); ok {
		r0 = rf(ctx, statusKYC)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.QuerySnapshot)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, statusKYC)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
