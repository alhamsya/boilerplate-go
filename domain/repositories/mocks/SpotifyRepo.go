// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	spotify "github.com/alhamsya/boilerplate-go/infrastructure/externals/spotify"

	testing "testing"
)

// SpotifyRepo is an autogenerated mock type for the SpotifyRepo type
type SpotifyRepo struct {
	mock.Mock
}

type SpotifyRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *SpotifyRepo) EXPECT() *SpotifyRepo_Expecter {
	return &SpotifyRepo_Expecter{mock: &_m.Mock}
}

// GetUser provides a mock function with given fields:
func (_m *SpotifyRepo) GetUser() (*spotify.Profile, error) {
	ret := _m.Called()

	var r0 *spotify.Profile
	if rf, ok := ret.Get(0).(func() *spotify.Profile); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*spotify.Profile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SpotifyRepo_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type SpotifyRepo_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
func (_e *SpotifyRepo_Expecter) GetUser() *SpotifyRepo_GetUser_Call {
	return &SpotifyRepo_GetUser_Call{Call: _e.mock.On("GetUser")}
}

func (_c *SpotifyRepo_GetUser_Call) Run(run func()) *SpotifyRepo_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SpotifyRepo_GetUser_Call) Return(responseObject *spotify.Profile, err error) *SpotifyRepo_GetUser_Call {
	_c.Call.Return(responseObject, err)
	return _c
}

// NewSpotifyRepo creates a new instance of SpotifyRepo. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSpotifyRepo(t testing.TB) *SpotifyRepo {
	mock := &SpotifyRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
