// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	fiber "github.com/gofiber/fiber/v2"
	mock "github.com/stretchr/testify/mock"

	modelReq "github.com/alhamsya/boilerplate-go/domain/models/request"

	modelResp "github.com/alhamsya/boilerplate-go/domain/models/response"
)

// RestUsecase is an autogenerated mock type for the RestUsecase type
type RestUsecase struct {
	mock.Mock
}

type RestUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *RestUsecase) EXPECT() *RestUsecase_Expecter {
	return &RestUsecase_Expecter{mock: &_m.Mock}
}

// DoGetDetailMovie provides a mock function with given fields: ctx, movieID
func (_m *RestUsecase) DoGetDetailMovie(ctx *fiber.Ctx, movieID string) (*modelResp.DetailMovie, int, error) {
	ret := _m.Called(ctx, movieID)

	var r0 *modelResp.DetailMovie
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, string) *modelResp.DetailMovie); ok {
		r0 = rf(ctx, movieID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelResp.DetailMovie)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*fiber.Ctx, string) int); ok {
		r1 = rf(ctx, movieID)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*fiber.Ctx, string) error); ok {
		r2 = rf(ctx, movieID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RestUsecase_DoGetDetailMovie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoGetDetailMovie'
type RestUsecase_DoGetDetailMovie_Call struct {
	*mock.Call
}

// DoGetDetailMovie is a helper method to define mock.On call
//   - ctx *fiber.Ctx
//   - movieID string
func (_e *RestUsecase_Expecter) DoGetDetailMovie(ctx interface{}, movieID interface{}) *RestUsecase_DoGetDetailMovie_Call {
	return &RestUsecase_DoGetDetailMovie_Call{Call: _e.mock.On("DoGetDetailMovie", ctx, movieID)}
}

func (_c *RestUsecase_DoGetDetailMovie_Call) Run(run func(ctx *fiber.Ctx, movieID string)) *RestUsecase_DoGetDetailMovie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx), args[1].(string))
	})
	return _c
}

func (_c *RestUsecase_DoGetDetailMovie_Call) Return(resp *modelResp.DetailMovie, httpCode int, err error) *RestUsecase_DoGetDetailMovie_Call {
	_c.Call.Return(resp, httpCode, err)
	return _c
}

// DoGetListMovie provides a mock function with given fields: ctx, reqClient
func (_m *RestUsecase) DoGetListMovie(ctx *fiber.Ctx, reqClient *modelReq.ListMovie) (*modelResp.ListMovie, int, error) {
	ret := _m.Called(ctx, reqClient)

	var r0 *modelResp.ListMovie
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, *modelReq.ListMovie) *modelResp.ListMovie); ok {
		r0 = rf(ctx, reqClient)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelResp.ListMovie)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*fiber.Ctx, *modelReq.ListMovie) int); ok {
		r1 = rf(ctx, reqClient)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*fiber.Ctx, *modelReq.ListMovie) error); ok {
		r2 = rf(ctx, reqClient)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RestUsecase_DoGetListMovie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoGetListMovie'
type RestUsecase_DoGetListMovie_Call struct {
	*mock.Call
}

// DoGetListMovie is a helper method to define mock.On call
//   - ctx *fiber.Ctx
//   - reqClient *modelReq.ListMovie
func (_e *RestUsecase_Expecter) DoGetListMovie(ctx interface{}, reqClient interface{}) *RestUsecase_DoGetListMovie_Call {
	return &RestUsecase_DoGetListMovie_Call{Call: _e.mock.On("DoGetListMovie", ctx, reqClient)}
}

func (_c *RestUsecase_DoGetListMovie_Call) Run(run func(ctx *fiber.Ctx, reqClient *modelReq.ListMovie)) *RestUsecase_DoGetListMovie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx), args[1].(*modelReq.ListMovie))
	})
	return _c
}

func (_c *RestUsecase_DoGetListMovie_Call) Return(resp *modelResp.ListMovie, httpCode int, err error) *RestUsecase_DoGetListMovie_Call {
	_c.Call.Return(resp, httpCode, err)
	return _c
}

// DoSigning provides a mock function with given fields: ctx, reqClient
func (_m *RestUsecase) DoSigning(ctx *fiber.Ctx, reqClient *modelReq.User) (*modelResp.User, int, error) {
	ret := _m.Called(ctx, reqClient)

	var r0 *modelResp.User
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, *modelReq.User) *modelResp.User); ok {
		r0 = rf(ctx, reqClient)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelResp.User)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*fiber.Ctx, *modelReq.User) int); ok {
		r1 = rf(ctx, reqClient)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*fiber.Ctx, *modelReq.User) error); ok {
		r2 = rf(ctx, reqClient)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RestUsecase_DoSigning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoSigning'
type RestUsecase_DoSigning_Call struct {
	*mock.Call
}

// DoSigning is a helper method to define mock.On call
//   - ctx *fiber.Ctx
//   - reqClient *modelReq.User
func (_e *RestUsecase_Expecter) DoSigning(ctx interface{}, reqClient interface{}) *RestUsecase_DoSigning_Call {
	return &RestUsecase_DoSigning_Call{Call: _e.mock.On("DoSigning", ctx, reqClient)}
}

func (_c *RestUsecase_DoSigning_Call) Run(run func(ctx *fiber.Ctx, reqClient *modelReq.User)) *RestUsecase_DoSigning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx), args[1].(*modelReq.User))
	})
	return _c
}

func (_c *RestUsecase_DoSigning_Call) Return(resp *modelResp.User, httpCode int, err error) *RestUsecase_DoSigning_Call {
	_c.Call.Return(resp, httpCode, err)
	return _c
}

// DoSignup provides a mock function with given fields: ctx, reqClient
func (_m *RestUsecase) DoSignup(ctx *fiber.Ctx, reqClient *modelReq.User) (*modelResp.User, int, error) {
	ret := _m.Called(ctx, reqClient)

	var r0 *modelResp.User
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, *modelReq.User) *modelResp.User); ok {
		r0 = rf(ctx, reqClient)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelResp.User)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*fiber.Ctx, *modelReq.User) int); ok {
		r1 = rf(ctx, reqClient)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*fiber.Ctx, *modelReq.User) error); ok {
		r2 = rf(ctx, reqClient)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RestUsecase_DoSignup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoSignup'
type RestUsecase_DoSignup_Call struct {
	*mock.Call
}

// DoSignup is a helper method to define mock.On call
//   - ctx *fiber.Ctx
//   - reqClient *modelReq.User
func (_e *RestUsecase_Expecter) DoSignup(ctx interface{}, reqClient interface{}) *RestUsecase_DoSignup_Call {
	return &RestUsecase_DoSignup_Call{Call: _e.mock.On("DoSignup", ctx, reqClient)}
}

func (_c *RestUsecase_DoSignup_Call) Run(run func(ctx *fiber.Ctx, reqClient *modelReq.User)) *RestUsecase_DoSignup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx), args[1].(*modelReq.User))
	})
	return _c
}

func (_c *RestUsecase_DoSignup_Call) Return(resp *modelResp.User, httpCode int, err error) *RestUsecase_DoSignup_Call {
	_c.Call.Return(resp, httpCode, err)
	return _c
}

type mockConstructorTestingTNewRestUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewRestUsecase creates a new instance of RestUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRestUsecase(t mockConstructorTestingTNewRestUsecase) *RestUsecase {
	mock := &RestUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
