// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	customError "github.com/alhamsya/boilerplate-go/lib/managers/custom_error"
	mock "github.com/stretchr/testify/mock"

	service "github.com/alhamsya/boilerplate-go/protos"
)

// GrpcUsecase is an autogenerated mock type for the GrpcUsecase type
type GrpcUsecase struct {
	mock.Mock
}

type GrpcUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *GrpcUsecase) EXPECT() *GrpcUsecase_Expecter {
	return &GrpcUsecase_Expecter{mock: &_m.Mock}
}

// DoGetDetailMovie provides a mock function with given fields: ctx, req
func (_m *GrpcUsecase) DoGetDetailMovie(ctx context.Context, req *service.GetDetailMovieReq) (*service.GetDetailMovieResp, error) {
	ret := _m.Called(ctx, req)

	var r0 *service.GetDetailMovieResp
	if rf, ok := ret.Get(0).(func(context.Context, *service.GetDetailMovieReq) *service.GetDetailMovieResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.GetDetailMovieResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *service.GetDetailMovieReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrpcUsecase_DoGetDetailMovie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoGetDetailMovie'
type GrpcUsecase_DoGetDetailMovie_Call struct {
	*mock.Call
}

// DoGetDetailMovie is a helper method to define mock.On call
//   - ctx context.Context
//   - req *service.GetDetailMovieReq
func (_e *GrpcUsecase_Expecter) DoGetDetailMovie(ctx interface{}, req interface{}) *GrpcUsecase_DoGetDetailMovie_Call {
	return &GrpcUsecase_DoGetDetailMovie_Call{Call: _e.mock.On("DoGetDetailMovie", ctx, req)}
}

func (_c *GrpcUsecase_DoGetDetailMovie_Call) Run(run func(ctx context.Context, req *service.GetDetailMovieReq)) *GrpcUsecase_DoGetDetailMovie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*service.GetDetailMovieReq))
	})
	return _c
}

func (_c *GrpcUsecase_DoGetDetailMovie_Call) Return(resp *service.GetDetailMovieResp, err error) *GrpcUsecase_DoGetDetailMovie_Call {
	_c.Call.Return(resp, err)
	return _c
}

// DoGetListMovie provides a mock function with given fields: ctx, reqClient
func (_m *GrpcUsecase) DoGetListMovie(ctx context.Context, reqClient *service.GetListMovieReq) (*service.GetListMovieResp, *customError.Error) {
	ret := _m.Called(ctx, reqClient)

	var r0 *service.GetListMovieResp
	if rf, ok := ret.Get(0).(func(context.Context, *service.GetListMovieReq) *service.GetListMovieResp); ok {
		r0 = rf(ctx, reqClient)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.GetListMovieResp)
		}
	}

	var r1 *customError.Error
	if rf, ok := ret.Get(1).(func(context.Context, *service.GetListMovieReq) *customError.Error); ok {
		r1 = rf(ctx, reqClient)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*customError.Error)
		}
	}

	return r0, r1
}

// GrpcUsecase_DoGetListMovie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoGetListMovie'
type GrpcUsecase_DoGetListMovie_Call struct {
	*mock.Call
}

// DoGetListMovie is a helper method to define mock.On call
//   - ctx context.Context
//   - reqClient *service.GetListMovieReq
func (_e *GrpcUsecase_Expecter) DoGetListMovie(ctx interface{}, reqClient interface{}) *GrpcUsecase_DoGetListMovie_Call {
	return &GrpcUsecase_DoGetListMovie_Call{Call: _e.mock.On("DoGetListMovie", ctx, reqClient)}
}

func (_c *GrpcUsecase_DoGetListMovie_Call) Run(run func(ctx context.Context, reqClient *service.GetListMovieReq)) *GrpcUsecase_DoGetListMovie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*service.GetListMovieReq))
	})
	return _c
}

func (_c *GrpcUsecase_DoGetListMovie_Call) Return(resp *service.GetListMovieResp, errResp *customError.Error) *GrpcUsecase_DoGetListMovie_Call {
	_c.Call.Return(resp, errResp)
	return _c
}

type mockConstructorTestingTNewGrpcUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewGrpcUsecase creates a new instance of GrpcUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGrpcUsecase(t mockConstructorTestingTNewGrpcUsecase) *GrpcUsecase {
	mock := &GrpcUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
