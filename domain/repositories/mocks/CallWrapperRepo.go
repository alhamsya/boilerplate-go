// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	wrappers "github.com/alhamsya/boilerplate-go/infrastructure/wrappers"
)

// CallWrapperRepo is an autogenerated mock type for the CallWrapperRepo type
type CallWrapperRepo struct {
	mock.Mock
}

type CallWrapperRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *CallWrapperRepo) EXPECT() *CallWrapperRepo_Expecter {
	return &CallWrapperRepo_Expecter{mock: &_m.Mock}
}

// Call provides a mock function with given fields: req
func (_m *CallWrapperRepo) Call(req func() (interface{}, error)) (interface{}, error) {
	ret := _m.Called(req)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(func() (interface{}, error)) interface{}); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(func() (interface{}, error)) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CallWrapperRepo_Call_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Call'
type CallWrapperRepo_Call_Call struct {
	*mock.Call
}

// Call is a helper method to define mock.On call
//   - req func()(interface{} , error)
func (_e *CallWrapperRepo_Expecter) Call(req interface{}) *CallWrapperRepo_Call_Call {
	return &CallWrapperRepo_Call_Call{Call: _e.mock.On("Call", req)}
}

func (_c *CallWrapperRepo_Call_Call) Run(run func(req func() (interface{}, error))) *CallWrapperRepo_Call_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func() (interface{}, error)))
	})
	return _c
}

func (_c *CallWrapperRepo_Call_Call) Return(_a0 interface{}, _a1 error) *CallWrapperRepo_Call_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetWrapper provides a mock function with given fields: usecase
func (_m *CallWrapperRepo) GetWrapper(usecase string) *wrappers.Wrapper {
	ret := _m.Called(usecase)

	var r0 *wrappers.Wrapper
	if rf, ok := ret.Get(0).(func(string) *wrappers.Wrapper); ok {
		r0 = rf(usecase)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wrappers.Wrapper)
		}
	}

	return r0
}

// CallWrapperRepo_GetWrapper_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWrapper'
type CallWrapperRepo_GetWrapper_Call struct {
	*mock.Call
}

// GetWrapper is a helper method to define mock.On call
//   - usecase string
func (_e *CallWrapperRepo_Expecter) GetWrapper(usecase interface{}) *CallWrapperRepo_GetWrapper_Call {
	return &CallWrapperRepo_GetWrapper_Call{Call: _e.mock.On("GetWrapper", usecase)}
}

func (_c *CallWrapperRepo_GetWrapper_Call) Run(run func(usecase string)) *CallWrapperRepo_GetWrapper_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *CallWrapperRepo_GetWrapper_Call) Return(_a0 *wrappers.Wrapper) *CallWrapperRepo_GetWrapper_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewCallWrapperRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewCallWrapperRepo creates a new instance of CallWrapperRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCallWrapperRepo(t mockConstructorTestingTNewCallWrapperRepo) *CallWrapperRepo {
	mock := &CallWrapperRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
