// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	omdb "github.com/alhamsya/boilerplate-go/infrastructure/externals/omdb"
	mock "github.com/stretchr/testify/mock"
)

// CacheRepo is an autogenerated mock type for the CacheRepo type
type CacheRepo struct {
	mock.Mock
}

type CacheRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *CacheRepo) EXPECT() *CacheRepo_Expecter {
	return &CacheRepo_Expecter{mock: &_m.Mock}
}

// DecrKYCByStatus provides a mock function with given fields: ctx, statusKYC
func (_m *CacheRepo) DecrKYCByStatus(ctx context.Context, statusKYC int64) error {
	ret := _m.Called(ctx, statusKYC)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, statusKYC)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheRepo_DecrKYCByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecrKYCByStatus'
type CacheRepo_DecrKYCByStatus_Call struct {
	*mock.Call
}

// DecrKYCByStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - statusKYC int64
func (_e *CacheRepo_Expecter) DecrKYCByStatus(ctx interface{}, statusKYC interface{}) *CacheRepo_DecrKYCByStatus_Call {
	return &CacheRepo_DecrKYCByStatus_Call{Call: _e.mock.On("DecrKYCByStatus", ctx, statusKYC)}
}

func (_c *CacheRepo_DecrKYCByStatus_Call) Run(run func(ctx context.Context, statusKYC int64)) *CacheRepo_DecrKYCByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *CacheRepo_DecrKYCByStatus_Call) Return(err error) *CacheRepo_DecrKYCByStatus_Call {
	_c.Call.Return(err)
	return _c
}

// GetDetailMovie provides a mock function with given fields: ctx, movieID
func (_m *CacheRepo) GetDetailMovie(ctx context.Context, movieID string) (*omdb.OMDBDetail, error) {
	ret := _m.Called(ctx, movieID)

	var r0 *omdb.OMDBDetail
	if rf, ok := ret.Get(0).(func(context.Context, string) *omdb.OMDBDetail); ok {
		r0 = rf(ctx, movieID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*omdb.OMDBDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, movieID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CacheRepo_GetDetailMovie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDetailMovie'
type CacheRepo_GetDetailMovie_Call struct {
	*mock.Call
}

// GetDetailMovie is a helper method to define mock.On call
//   - ctx context.Context
//   - movieID string
func (_e *CacheRepo_Expecter) GetDetailMovie(ctx interface{}, movieID interface{}) *CacheRepo_GetDetailMovie_Call {
	return &CacheRepo_GetDetailMovie_Call{Call: _e.mock.On("GetDetailMovie", ctx, movieID)}
}

func (_c *CacheRepo_GetDetailMovie_Call) Run(run func(ctx context.Context, movieID string)) *CacheRepo_GetDetailMovie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CacheRepo_GetDetailMovie_Call) Return(resp *omdb.OMDBDetail, err error) *CacheRepo_GetDetailMovie_Call {
	_c.Call.Return(resp, err)
	return _c
}

// GetKYCByStatus provides a mock function with given fields: ctx, statusKYC
func (_m *CacheRepo) GetKYCByStatus(ctx context.Context, statusKYC int64) (int, error) {
	ret := _m.Called(ctx, statusKYC)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, int64) int); ok {
		r0 = rf(ctx, statusKYC)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, statusKYC)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CacheRepo_GetKYCByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKYCByStatus'
type CacheRepo_GetKYCByStatus_Call struct {
	*mock.Call
}

// GetKYCByStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - statusKYC int64
func (_e *CacheRepo_Expecter) GetKYCByStatus(ctx interface{}, statusKYC interface{}) *CacheRepo_GetKYCByStatus_Call {
	return &CacheRepo_GetKYCByStatus_Call{Call: _e.mock.On("GetKYCByStatus", ctx, statusKYC)}
}

func (_c *CacheRepo_GetKYCByStatus_Call) Run(run func(ctx context.Context, statusKYC int64)) *CacheRepo_GetKYCByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *CacheRepo_GetKYCByStatus_Call) Return(total int, err error) *CacheRepo_GetKYCByStatus_Call {
	_c.Call.Return(total, err)
	return _c
}

// GetListMovie provides a mock function with given fields: ctx, search, page
func (_m *CacheRepo) GetListMovie(ctx context.Context, search string, page int64) (*omdb.OMDBList, error) {
	ret := _m.Called(ctx, search, page)

	var r0 *omdb.OMDBList
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *omdb.OMDBList); ok {
		r0 = rf(ctx, search, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*omdb.OMDBList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, search, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CacheRepo_GetListMovie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListMovie'
type CacheRepo_GetListMovie_Call struct {
	*mock.Call
}

// GetListMovie is a helper method to define mock.On call
//   - ctx context.Context
//   - search string
//   - page int64
func (_e *CacheRepo_Expecter) GetListMovie(ctx interface{}, search interface{}, page interface{}) *CacheRepo_GetListMovie_Call {
	return &CacheRepo_GetListMovie_Call{Call: _e.mock.On("GetListMovie", ctx, search, page)}
}

func (_c *CacheRepo_GetListMovie_Call) Run(run func(ctx context.Context, search string, page int64)) *CacheRepo_GetListMovie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *CacheRepo_GetListMovie_Call) Return(resp *omdb.OMDBList, err error) *CacheRepo_GetListMovie_Call {
	_c.Call.Return(resp, err)
	return _c
}

// IncrKYCByStatus provides a mock function with given fields: ctx, statusKYC
func (_m *CacheRepo) IncrKYCByStatus(ctx context.Context, statusKYC int64) error {
	ret := _m.Called(ctx, statusKYC)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, statusKYC)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheRepo_IncrKYCByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrKYCByStatus'
type CacheRepo_IncrKYCByStatus_Call struct {
	*mock.Call
}

// IncrKYCByStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - statusKYC int64
func (_e *CacheRepo_Expecter) IncrKYCByStatus(ctx interface{}, statusKYC interface{}) *CacheRepo_IncrKYCByStatus_Call {
	return &CacheRepo_IncrKYCByStatus_Call{Call: _e.mock.On("IncrKYCByStatus", ctx, statusKYC)}
}

func (_c *CacheRepo_IncrKYCByStatus_Call) Run(run func(ctx context.Context, statusKYC int64)) *CacheRepo_IncrKYCByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *CacheRepo_IncrKYCByStatus_Call) Return(err error) *CacheRepo_IncrKYCByStatus_Call {
	_c.Call.Return(err)
	return _c
}

// SetDetailMovie provides a mock function with given fields: ctx, movieID, req
func (_m *CacheRepo) SetDetailMovie(ctx context.Context, movieID string, req *omdb.OMDBDetail) error {
	ret := _m.Called(ctx, movieID, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *omdb.OMDBDetail) error); ok {
		r0 = rf(ctx, movieID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheRepo_SetDetailMovie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDetailMovie'
type CacheRepo_SetDetailMovie_Call struct {
	*mock.Call
}

// SetDetailMovie is a helper method to define mock.On call
//   - ctx context.Context
//   - movieID string
//   - req *omdb.OMDBDetail
func (_e *CacheRepo_Expecter) SetDetailMovie(ctx interface{}, movieID interface{}, req interface{}) *CacheRepo_SetDetailMovie_Call {
	return &CacheRepo_SetDetailMovie_Call{Call: _e.mock.On("SetDetailMovie", ctx, movieID, req)}
}

func (_c *CacheRepo_SetDetailMovie_Call) Run(run func(ctx context.Context, movieID string, req *omdb.OMDBDetail)) *CacheRepo_SetDetailMovie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*omdb.OMDBDetail))
	})
	return _c
}

func (_c *CacheRepo_SetDetailMovie_Call) Return(err error) *CacheRepo_SetDetailMovie_Call {
	_c.Call.Return(err)
	return _c
}

// SetKYCByStatus provides a mock function with given fields: ctx, statusKYC, value
func (_m *CacheRepo) SetKYCByStatus(ctx context.Context, statusKYC int64, value int) error {
	ret := _m.Called(ctx, statusKYC, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int) error); ok {
		r0 = rf(ctx, statusKYC, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheRepo_SetKYCByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetKYCByStatus'
type CacheRepo_SetKYCByStatus_Call struct {
	*mock.Call
}

// SetKYCByStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - statusKYC int64
//   - value int
func (_e *CacheRepo_Expecter) SetKYCByStatus(ctx interface{}, statusKYC interface{}, value interface{}) *CacheRepo_SetKYCByStatus_Call {
	return &CacheRepo_SetKYCByStatus_Call{Call: _e.mock.On("SetKYCByStatus", ctx, statusKYC, value)}
}

func (_c *CacheRepo_SetKYCByStatus_Call) Run(run func(ctx context.Context, statusKYC int64, value int)) *CacheRepo_SetKYCByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int))
	})
	return _c
}

func (_c *CacheRepo_SetKYCByStatus_Call) Return(err error) *CacheRepo_SetKYCByStatus_Call {
	_c.Call.Return(err)
	return _c
}

// SetListMovie provides a mock function with given fields: ctx, search, page, req
func (_m *CacheRepo) SetListMovie(ctx context.Context, search string, page int64, req *omdb.OMDBList) error {
	ret := _m.Called(ctx, search, page, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, *omdb.OMDBList) error); ok {
		r0 = rf(ctx, search, page, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheRepo_SetListMovie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetListMovie'
type CacheRepo_SetListMovie_Call struct {
	*mock.Call
}

// SetListMovie is a helper method to define mock.On call
//   - ctx context.Context
//   - search string
//   - page int64
//   - req *omdb.OMDBList
func (_e *CacheRepo_Expecter) SetListMovie(ctx interface{}, search interface{}, page interface{}, req interface{}) *CacheRepo_SetListMovie_Call {
	return &CacheRepo_SetListMovie_Call{Call: _e.mock.On("SetListMovie", ctx, search, page, req)}
}

func (_c *CacheRepo_SetListMovie_Call) Run(run func(ctx context.Context, search string, page int64, req *omdb.OMDBList)) *CacheRepo_SetListMovie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(*omdb.OMDBList))
	})
	return _c
}

func (_c *CacheRepo_SetListMovie_Call) Return(err error) *CacheRepo_SetListMovie_Call {
	_c.Call.Return(err)
	return _c
}

type mockConstructorTestingTNewCacheRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewCacheRepo creates a new instance of CacheRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCacheRepo(t mockConstructorTestingTNewCacheRepo) *CacheRepo {
	mock := &CacheRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
