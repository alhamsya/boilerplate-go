// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ConsumerUsecase is an autogenerated mock type for the ConsumerUsecase type
type ConsumerUsecase struct {
	mock.Mock
}

type ConsumerUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *ConsumerUsecase) EXPECT() *ConsumerUsecase_Expecter {
	return &ConsumerUsecase_Expecter{mock: &_m.Mock}
}

// DoPayment provides a mock function with given fields: ctx
func (_m *ConsumerUsecase) DoPayment(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsumerUsecase_DoPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoPayment'
type ConsumerUsecase_DoPayment_Call struct {
	*mock.Call
}

// DoPayment is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ConsumerUsecase_Expecter) DoPayment(ctx interface{}) *ConsumerUsecase_DoPayment_Call {
	return &ConsumerUsecase_DoPayment_Call{Call: _e.mock.On("DoPayment", ctx)}
}

func (_c *ConsumerUsecase_DoPayment_Call) Run(run func(ctx context.Context)) *ConsumerUsecase_DoPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ConsumerUsecase_DoPayment_Call) Return(_a0 error) *ConsumerUsecase_DoPayment_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewConsumerUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewConsumerUsecase creates a new instance of ConsumerUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConsumerUsecase(t mockConstructorTestingTNewConsumerUsecase) *ConsumerUsecase {
	mock := &ConsumerUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
