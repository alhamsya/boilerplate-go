// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// CronUsecase is an autogenerated mock type for the CronUsecase type
type CronUsecase struct {
	mock.Mock
}

type CronUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *CronUsecase) EXPECT() *CronUsecase_Expecter {
	return &CronUsecase_Expecter{mock: &_m.Mock}
}

// DoCreateDummyData provides a mock function with given fields: ctx
func (_m *CronUsecase) DoCreateDummyData(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CronUsecase_DoCreateDummyData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoCreateDummyData'
type CronUsecase_DoCreateDummyData_Call struct {
	*mock.Call
}

// DoCreateDummyData is a helper method to define mock.On call
//  - ctx context.Context
func (_e *CronUsecase_Expecter) DoCreateDummyData(ctx interface{}) *CronUsecase_DoCreateDummyData_Call {
	return &CronUsecase_DoCreateDummyData_Call{Call: _e.mock.On("DoCreateDummyData", ctx)}
}

func (_c *CronUsecase_DoCreateDummyData_Call) Run(run func(ctx context.Context)) *CronUsecase_DoCreateDummyData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *CronUsecase_DoCreateDummyData_Call) Return(_a0 error) *CronUsecase_DoCreateDummyData_Call {
	_c.Call.Return(_a0)
	return _c
}

// NewCronUsecase creates a new instance of CronUsecase. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewCronUsecase(t testing.TB) *CronUsecase {
	mock := &CronUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
