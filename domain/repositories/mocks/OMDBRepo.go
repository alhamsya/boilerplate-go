// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	omdb "github.com/alhamsya/boilerplate-go/infrastructure/externals/omdb"
	mock "github.com/stretchr/testify/mock"
)

// OMDBRepo is an autogenerated mock type for the OMDBRepo type
type OMDBRepo struct {
	mock.Mock
}

type OMDBRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *OMDBRepo) EXPECT() *OMDBRepo_Expecter {
	return &OMDBRepo_Expecter{mock: &_m.Mock}
}

// GetDetailMovie provides a mock function with given fields: movieID
func (_m *OMDBRepo) GetDetailMovie(movieID string) (*omdb.OMDBDetail, error) {
	ret := _m.Called(movieID)

	var r0 *omdb.OMDBDetail
	if rf, ok := ret.Get(0).(func(string) *omdb.OMDBDetail); ok {
		r0 = rf(movieID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*omdb.OMDBDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(movieID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OMDBRepo_GetDetailMovie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDetailMovie'
type OMDBRepo_GetDetailMovie_Call struct {
	*mock.Call
}

// GetDetailMovie is a helper method to define mock.On call
//   - movieID string
func (_e *OMDBRepo_Expecter) GetDetailMovie(movieID interface{}) *OMDBRepo_GetDetailMovie_Call {
	return &OMDBRepo_GetDetailMovie_Call{Call: _e.mock.On("GetDetailMovie", movieID)}
}

func (_c *OMDBRepo_GetDetailMovie_Call) Run(run func(movieID string)) *OMDBRepo_GetDetailMovie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *OMDBRepo_GetDetailMovie_Call) Return(_a0 *omdb.OMDBDetail, _a1 error) *OMDBRepo_GetDetailMovie_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetListMovie provides a mock function with given fields: search, page
func (_m *OMDBRepo) GetListMovie(search string, page int64) (*omdb.OMDBList, error) {
	ret := _m.Called(search, page)

	var r0 *omdb.OMDBList
	if rf, ok := ret.Get(0).(func(string, int64) *omdb.OMDBList); ok {
		r0 = rf(search, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*omdb.OMDBList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int64) error); ok {
		r1 = rf(search, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OMDBRepo_GetListMovie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListMovie'
type OMDBRepo_GetListMovie_Call struct {
	*mock.Call
}

// GetListMovie is a helper method to define mock.On call
//   - search string
//   - page int64
func (_e *OMDBRepo_Expecter) GetListMovie(search interface{}, page interface{}) *OMDBRepo_GetListMovie_Call {
	return &OMDBRepo_GetListMovie_Call{Call: _e.mock.On("GetListMovie", search, page)}
}

func (_c *OMDBRepo_GetListMovie_Call) Run(run func(search string, page int64)) *OMDBRepo_GetListMovie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64))
	})
	return _c
}

func (_c *OMDBRepo_GetListMovie_Call) Return(_a0 *omdb.OMDBList, _a1 error) *OMDBRepo_GetListMovie_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewOMDBRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewOMDBRepo creates a new instance of OMDBRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOMDBRepo(t mockConstructorTestingTNewOMDBRepo) *OMDBRepo {
	mock := &OMDBRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
