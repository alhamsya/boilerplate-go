// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	"github.com/alhamsya/boilerplate-go/domain/models/request"
	modelMovie "github.com/alhamsya/boilerplate-go/domain/models/response"
	fiber "github.com/gofiber/fiber/v2"
	mock "github.com/stretchr/testify/mock"
)

// RestInterface is an autogenerated mock type for the RestInterface type
type RestInterface struct {
	mock.Mock
}

// DoGetDetailMovie provides a mock function with given fields: ctx, movieID
func (_m *RestInterface) DoGetDetailMovie(ctx *fiber.Ctx, movieID string) (*modelMovie.DetailMovie, int, error) {
	ret := _m.Called(ctx, movieID)

	var r0 *modelMovie.DetailMovie
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, string) *modelMovie.DetailMovie); ok {
		r0 = rf(ctx, movieID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelMovie.DetailMovie)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*fiber.Ctx, string) int); ok {
		r1 = rf(ctx, movieID)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*fiber.Ctx, string) error); ok {
		r2 = rf(ctx, movieID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DoGetListMovie provides a mock function with given fields: ctx, reqClient
func (_m *RestInterface) DoGetListMovie(ctx *fiber.Ctx, reqClient *modelReq.ListMovie) (*modelMovie.ListMovie, int, error) {
	ret := _m.Called(ctx, reqClient)

	var r0 *modelMovie.ListMovie
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, *modelReq.ListMovie) *modelMovie.ListMovie); ok {
		r0 = rf(ctx, reqClient)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelMovie.ListMovie)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*fiber.Ctx, *modelReq.ListMovie) int); ok {
		r1 = rf(ctx, reqClient)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*fiber.Ctx, *modelReq.ListMovie) error); ok {
		r2 = rf(ctx, reqClient)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
